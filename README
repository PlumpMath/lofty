1. Introduction
---------------

Abaclade is a C++11 framework featuring:

•  Multiple platform compatibility: Linux, OS X, Windows and FreeBSD;

•  Seamless integration with the C++11 STL;

•  Integrated self-diagnosis: programs don’t just crash; every error condition
   (including dereferencing a null pointer) results in an exception and a stack
   trace that includes the actual values of arguments and local variables ‒
   you’ll always know what went wrong! (see [DOC:8503 Stack tracing]);

•  Testing framework integrated in the library with full support from the
   recommended built, Abamake (see <https://github.com/raffaellod/abamake>);

•  Approachable and intuitive programming style, similar to Python’s; a good
   example is its modern I/O class hierarchy inspired by Python 3.x’s library,
   including a fully type-safe replacement for printf() (see [DOC:7103
   abc::io::text::writer::print()]);

•  Full support for Unicode and the C++11 char32_t character type (see [DOC:4854
   Unicode support in Abaclade]);

•  Use of templates and their specializations over macros and void pointers ‒ no
   C-style variadic functions either;

•  Support for text-based and (in the future) GUI applications as well as
   service-oriented architectures;


2. Past, present and future
---------------------------


2.1. Some history
-----------------

Abaclade was started in the mid-2000s with a dual scope: on one hand explore if
it was possible, (ab)using templates and other C++ features, to have automatic
error reporting similar to what higher-level languages such as Python and Java
offer; on the other hand, a required target was to be able to write programs
that would be light, fast, easy to write, and easy to read years later.

At the time, the features of C++ were insufficient to accomplish all that
without using some sort of pre-preprocessor, so the project goals lead to
several dead-ended projects.

When C++11 finally reached the final draft status, it turned out that it allowed
for most of the features that had originally been planned, so development of
Abaclade as it is now was finally started.


2.2. Current status of Abaclade
-------------------------------

Abaclade can be considered of “beta” grade, and adoption by small projects is
encouraged.


2.3. Project goals
------------------

Abaclade has very ambitious goals:

1. Supersede other C++ libraries that fail to exploit the features of C++11 ‒
   especially libraries developed as C++ bindings for C libraries;

2. Demonstrate that C++ programs can be as sleek as Java or Python programs,
   while being considerably more efficient;

3. Encourage writing of software in C++ instead of other less efficient
   languages such as C (development efficiency) or Java (execution efficiency);

All future development will be geared towards getting closer to accomplishing
these objectives.


3. Compatibility
----------------

Abaclade is in full development, so the compatibility can and will change over
time (hopefully expanding).

Supported build systems:

•  Clang + GNU LD
   •  Clang 3.3 (later versions to be tested)
   •  binutils (version to be determined – anything from 2010 on should work)

•  GNU toolchain
   •  GCC 4.6 to 4.9
   •  binutils (version to be determined – anything from 2010 on should work)

•  Apple SDK for OS X 10.10 Yosemite and 10.9 Mavericks (included in Xcode 6)

•  Microsoft Visual Studio 2010 (Visual C++ 10 / MSC 16) or later

Supported operating systems:

•  GNU/Linux using glibc 2.17 or later;
•  OS X 10.9 Mavericks or later;
•  Microsoft Windows – temporarily only via Visual C++ 10, which means only
   Windows XP and later versions are supported.
•  FreeBSD – officially only the latest -RELEASE is supported;

Additionally, Abaclade requires Python 2.7 or 3.2 or later to be installed on
the build host system. This is expected to not be needed in the future.


4. Getting Abaclade
-------------------

Abaclade is available at https://github.com/raffaellod/abaclade via git; to
download it, just clone the repository:

   git clone https://github.com/raffaellod/abaclade.git
   cd abaclade

The default branch, master, is where all Linux development occurs; platform-
specific branches are regularly merged to and from it, and guarantee a stable
base for each platform, so you’ll probably want to switch to the one matching
yours if you’re not targeting Linux:

•  OS X:    git checkout osx
•  Windows: git checkout vs2010
•  FreeBSD: git checkout freebsd


5. Building Abaclade
--------------------

Building Abaclade requires Abamake (see <https://github.com/raffaellod/
abamake>), which works as an improved make utility.

To build Abaclade, run Abamake from its base directory:

   abamake.py


This will create outputs in the bin/ and lib/ folders.


6. Installing Abaclade
----------------------

At the moment, Abaclade lacks any means for installation.

TODO: make Abaclade installable.


7. Using Abaclade
-----------------

For usage examples, please see the source files in the examples/ folder.
Examples are built as part of Abaclade (see § 5. Building Abaclade), and the
generated executables can be found in the bin/ output folder.

If Abaclade is not installed (see § 6. Installing Abaclade), example programs
will fail to run due to being unable to load Abaclade shared libraries. This can
be worked around by adding the output lib/ folder to the shared library search
path.

• On glibc/Linux and FreeBSD:

   env LD_LIBRARY_PATH=$PWD/lib bin/hello-world

• On OS X:

   env DYLD_LIBRARY_PATH=$PWD/lib bin/hello-world

• On Windows:

   set PATH=%PATH%;%CD%\lib
   bin\hello-world




--------------------------------------------------------------------------------
Copyright 2010, 2011, 2012, 2013, 2014
Raffaello D. Di Napoli

This file is part of Abaclade.

Abaclade is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

Abaclade is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
Abaclade. If not, see <http://www.gnu.org/licenses/>.
