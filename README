Copyright 2010, 2011, 2012, 2013
Raffaello D. Di Napoli

This file is part of Application-Building Components (henceforth referred to as
ABC).

ABC is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

ABC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
ABC. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------------

1. Introduction (“what?”)
-------------------------

Application-Building Components (ABC) is a framework for C++11 designed and
written with these features in mind:

•  Full support for text-based and GUI applications, as well as service-oriented
   architectures;
•  Intelligent usage of C++11 features and interoperability with the C++11 STL;
•  Extended run-time debugging support, with aims to reach or exceed that of
   languages such as Java or Python, featuring full stack traces (including
   arguments and locals) and a diverse and semantically-rich exception class
   hierarchy;
•  Modern I/O and IPC classes, inspired by Python’s library;
•  Compiler-enforced type safety (no void pointers, no C-style variadic
   functions).


2. “Why?” (and “When?”, while we’re at it)
------------------------------------------

Here’s what ABC has to offer, compared to other libraries/frameworks:
•  Full support for stack dumps (like Python or Java);
•  Programs don’t just crash - every error is an exception (including e.g.
   accessing a null pointer);
•  Rich exception class hierarchy, allowing clean-looking error handling;
•  C++-only (unlike, say, glib), so it was designed around features of the
   language rather than adapting to C++ an existing design;
•  Does not require a pre-preprocessor (unlike, say, Qt) because it gets
   everything done with a few macros and a lot of templates;
•  Does not clutter the code with macros (unlike, say, Boost, glib, Qt);
•  Offers an approachable and intuitive programming style, similar to Python
   (unlike Boost);
•  It’s built on top of the core STL (unlike most frameworks), and follows the
   same patterns and naming convention;
•  Achieves high execution efficiency due to the extensive use of std::move()
   and de-templated containers.

ABC was started in the mid-2000s with a dual scope: on one hand explore if it
was possible, (ab)using templates and other C++ features, to have automatic
error reporting similar to what higher-level languages such as Python and Java
offer; on the other hand, a required target was to be able to write programs
that would be light, fast, easy to write, and easy to read years later.

At the time, the features of C++ were insufficient to accomplish all that
without using some sort of pre-preprocessor, so the project goals lead to
several dead-ended projects.

When C++11 finally reached the final draft status, it turned out that it allowed
for most of the features that had originally been planned, so development of ABC
as it is now was finally started.


3. “How?” to use it
-------------------

This is the most basic program with ABC:

   #include <abc/module.hxx>
   #include <abc/trace.hxx>
   using namespace abc;

   class my_app_module :
      public app_module_impl<my_app_module> {
   public:

      int main(mvector<istr const> const & vsArgs) {
         abc_trace_fn((/*vsArgs*/));

         return 0;
      }
   };

   ABC_MAIN_APP_MODULE(my_app_module)

It doesn’t do anything, but it executes and terminates.

TODO: explain the above example, add DOC: link to how modules work.


4. Compatibility
----------------

ABC is in full development, so the compatibility can and will change over time
(hopefully expanding).

Supported build systems:

•  GNU toolchain
   •  GCC 4.3.0 to 4.7.x (4.8.x to be tested)
   •  binutils (version to be determined - anything from 2010 on should work)
   •  make (version to be determined - 3.80 should suffice)

•  Microsoft toolchain
   •  Visual C++ 10 (MSC 16 / Visual Studio 2010)
   •  MSBuild 4.0 (Visual Studio 2010)

Supported operating systems:

•  GNU/Linux - specifically GCC/glibc/GNU/Linux, due to some really cool
   exception handling-related features;
•  Microsoft Windows - temporarily only via Visual C++ 10, which means only
   Windows XP and later versions are supported.

