1. Introduction
---------------

Lofty is a C++11 framework featuring:

•  Multiple platform compatibility: Linux and Windows, with OS X and FreeBSD
   “only” blocked by Clang/LLVM limitations (see § 7. Compatibility);

•  Seamless integration with the C++11 STL;

•  Integrated self-diagnosis: programs don’t just crash; every error condition
   (including dereferencing a null pointer) results in an exception and a stack
   trace that includes the actual values of arguments and local variables –
   you’ll always know what went wrong! (see LOFTY_TRACE_FUNC(), for example);

•  Testing framework integrated in the library with full support from the
   recommended build tool, Complemake (<https://github.com/raffaellod/
   complemake>);

•  Approachable and intuitive programming style, similar to Python’s; a good
   example is its modern I/O class hierarchy inspired by Python 3.x’s library,
   including a fully type-safe replacement for printf() (see
   lofty::io::text::ostream::print());

•  Full support for Unicode and the C++11 char32_t character type (see
   lofty::text);

•  Use of templates and their specializations over macros and void pointers – no
   C-style variadic functions either;

•  Support for text-based and (in the future) GUI applications as well as
   service-oriented architectures;


2. Getting Lofty
----------------

Lofty is available at https://github.com/raffaellod/lofty via git; to download
it, just clone the repository:

   git clone https://github.com/raffaellod/lofty.git
   cd lofty

The default branch, linux, is where all Linux development occurs; branches for
other platforms are regularly merged to and from it, and guarantee a stable base
for each platform, so you should switch to the branch matching yours if you’re
not targeting Linux:

•  OS X:    git checkout osx
•  Windows: git checkout win
•  FreeBSD: git checkout freebsd

See § 6. Versioning and branching for more information on available branches.


3. Building Lofty
-----------------

Building Lofty requires Complemake (see <https://github.com/raffaellod/
complemake>), which works as an improved make utility and dependency manager.

To build Lofty, run Complemake from Lofty’s base directory:

   cd /path/to/lofty
   /path/to/complemake.py build

This will create outputs in the bin/ and lib/ folders.


4. Installing Lofty
-------------------

At the moment, Lofty lacks any means for installation.

TODO: make Lofty installable.


5. Using Lofty
--------------

For usage examples, please see the source files in the examples/ folder.
Examples are built as part of Lofty (see § 3. Building Lofty), and the generated
executables can be found in the bin/ output folder.

If Lofty is not installed (see § 4. Installing Lofty), example programs will
fail to run due to being unable to load Lofty shared libraries; this can be
worked around by adding the output lib/ folder to the shared library search
path:

• On glibc/Linux and FreeBSD:
   env LD_LIBRARY_PATH=$PWD/lib bin/hello-world

• On OS X:
   env DYLD_LIBRARY_PATH=$PWD/lib bin/hello-world

• On Windows:
   set PATH=%PATH%;%CD%\lib
   bin\hello-world


6. Versioning and branching
---------------------------

Lofty uses semantical versioning, with releases named vX.Y.Z-P where X is the
major version, Y is the minor version, Z is the revision, and P is the platform.

While the major version number is 0, changes to the minor indicate breaking
changes, while the revision is incremented for non-breaking changes such as bug
fixes and minor improvements.
There is one main branch for each platform (see § 2. Getting Lofty), and each
release is a tag along its platform branch’s history. There are no maintenance
releases.

Version 1.0.0 will indicate the first production-grade release, and the meaning
of the versioning schema will shift accordingly: the major number will indicate
breaking changes, the minor non-breaking changes (e.g. for maintenance
releases), and the revision will be incremented for bug fixes and other minor
improvements.
The main git branch will remanin master, but each major release will get its own
branch, to support maintenance releases independent of the master branch. Minor
versions and revisions will be tags along their major version’s branch.


7. Compatibility
----------------

Lofty is in full development, so its compatibility can and will change over time
(hopefully expanding).

Supported build systems:

•  GNU toolchain
   •  GCC 4.7 to 5.2
   •  binutils 2.20 or later

•  Microsoft Visual Studio 2010-2013 (Visual C++ 10-12 / MSC 16-18)

Clang/LLVM is not supported at this moment due to missing compiler features. If
and when these will get integrated in LLVM, Lofty will support these additional
build systems:

•  Clang + GNU LD
   •  Clang 3.5
   •  binutils 2.20 or later

•  Apple SDK for OS X 10.10 Yosemite and 10.9 Mavericks (included in Xcode 6)

Supported operating systems:

•  GNU/Linux 2.6 or later, using glibc 2.17 or later;
•  Microsoft Windows – currently only via Visual C++ 10 or later, which means
   only Windows XP and later versions are supported.

These operating systems are supported at the source code level, but binaries
built for them are fundmentally flawed due to the above-mentioned LLVM
limitations:

•  OS X 10.9 Mavericks or later;
•  FreeBSD – officially only the latest -RELEASE is supported;

Additionally, Lofty requires Python 2.7 or 3.2 or later to be installed on the
build host system.


6. Past, present and future
---------------------------


6.1. Some history
-----------------

Lofty was started in the mid-2000s with a dual scope: on one hand explore if it
was possible, (ab)using templates and other C++ features, to have automatic
error reporting similar to what higher-level languages such as Python and Java
offer; on the other hand, a required target was to be able to write programs
that would be light, fast, easy to write, and easy to read years later.

At the time, the features of C++ were insufficient to accomplish all that
without using some sort of pre-preprocessor, so the project goals lead to
several dead-ended projects.

When C++11 finally reached the final draft status, it turned out that it allowed
for most of the features that had originally been planned, so development of
Lofty as it is now was finally started.


6.2. Current status of Lofty
----------------------------

Lofty can be considered of “alpha” grade, and tinkering with it is strongly
encouraged.


6.3. Project goals
------------------

Lofty has very ambitious goals (hence its name):

1. Supersede other C++ libraries that fail to exploit the features of C++11 –
   especially libraries developed as C++ bindings for C libraries;

2. Demonstrate that C++ programs can be as sleek as Java or Python programs,
   while being considerably more efficient;

3. Encourage writing of software in C++ instead of other less efficient
   languages such as C (development efficiency) or Java (execution efficiency);

All future development will be geared towards getting closer to accomplishing
these objectives.




--------------------------------------------------------------------------------
Copyright 2010-2017 Raffaello D. Di Napoli

This file is part of Lofty.

Lofty is free software: you can redistribute it and/or modify it under the terms
of the GNU Lesser General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

Lofty is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with Lofty. If not, see <http://www.gnu.org/licenses/>.
